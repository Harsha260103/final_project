[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "FINAL PROJECT",
    "section": "",
    "text": "ABSTRACT\nThis project delves into statistical analyses to uncover insights into cricket performance trends and player contributions. Through data-driven methods, we classify players into performance tiers, analyze strike rates’ associations with scoring patterns and roles, and compare career impacts of cricket legends. Employing advanced statistical models and visualizations, this study provides actionable insights to inform team strategies and player evaluations.\n\n\nINTRODUCTION\nCricket analytics plays a crucial role in understanding player performance and team dynamics. This project utilizes a comprehensive dataset of ODI cricket statistics to explore critical questions about player roles, scoring patterns, and career impacts. By applying statistical models such as Chi-Square tests and t-tests, we aim to identify patterns and relationships that influence game outcomes and decision-making processes. The study’s findings offer valuable insights for teams, analysts, and enthusiasts seeking to better understand the nuances of the game.\n\n\nDATASET\n\n\nCode\n# Load necessary libraries\nlibrary(GGally)\n\n\nLoading required package: ggplot2\n\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\n\nCode\nlibrary(ggplot2)\n\n# Read the dataset\ndata &lt;- read.csv(\"ODI data.csv\", stringsAsFactors = FALSE)\n\n# Convert necessary columns to numeric\ndata$Runs &lt;- as.numeric(gsub(\",\", \"\", data$Runs))\ndata$BF &lt;- as.numeric(gsub(\",\", \"\", data$BF))\ndata$Ave &lt;- as.numeric(gsub(\",\", \"\", data$Ave))\ndata$SR &lt;- as.numeric(gsub(\",\", \"\", data$SR))\ndata$X100 &lt;- as.numeric(gsub(\",\", \"\", data$X100))\ndata$X50 &lt;- as.numeric(gsub(\",\", \"\", data$X50))\ndata$Inns &lt;- as.numeric(gsub(\",\", \"\", data$Inns))\ndata$NO &lt;- as.numeric(gsub(\",\", \"\", data$NO))\n\n# Select all relevant numeric columns for the pairs plot\nselected_data &lt;- data[, c(\"Runs\", \"BF\", \"Ave\", \"SR\", \"X100\", \"X50\", \"Inns\", \"NO\")]\n\n# Create the pairs plot\nggpairs(\n  selected_data,\n  title = \"Pairs Plot for ODI Data\",\n  upper = list(continuous = wrap(\"cor\", size = 4)),\n  lower = list(continuous = wrap(\"points\", size = 1.5)),\n  diag = list(continuous = wrap(\"densityDiag\", alpha = 0.5))\n)\n\n\n\n\n\n\n\n\n\nThe dataset provides comprehensive statistics of One Day International (ODI) cricket players, showcasing their performances across various metrics. It includes records of legendary players from different teams and spans multiple decades of ODI cricket. The dataset aims to facilitate insights into individual player contributions and trends in cricket over time.\nKey attributes in the dataset:\nPlayer: Name of the cricketer.\nSpan: Career duration in ODI cricket.\nMatches (Mat): Total number of matches played.\nInnings (Inns): Total number of innings batted.\nNot Outs (NO): Number of times the player remained not out.\nRuns: Total runs scored.\nHighest Score (HS): The highest score achieved by the player in an innings.\nAverage (Ave): Batting average, calculated as runs divided by the number of times out.\nBalls Faced (BF): Total balls faced by the player.\nStrike Rate (SR): The rate of scoring runs per 100 balls.\nHundreds (100): Number of centuries scored (100 or more runs in an innings).\nFifties (50): Number of half-centuries scored (50 to 99 runs in an innings).\nDucks (0): Number of times the player was dismissed without scoring.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlayer\nSpan\nMat\nInns\nNO\nRuns\nHS\nAve\nBF\nSR\n100\n50\n0\n\n\n\n\n1\nSR Tendulkar (INDIA)\n1989-2012\n463\n452\n41\n18426\n200*\n44.83\n21367\n86.23\n49\n96\n20\n\n\n2\nKC Sangakkara (Asia/ICC/SL)\n2000-2015\n404\n380\n41\n14234\n169\n41.98\n18048\n78.86\n25\n93\n15\n\n\n3\nRT Ponting (AUS/ICC)\n1995-2012\n375\n365\n39\n13704\n164\n42.03\n17046\n80.39\n30\n82\n20\n\n\n4\nST Jayasuriya (Asia/SL)\n1989-2011\n445\n433\n18\n13430\n189\n32.36\n14725\n91.2\n28\n68\n34\n\n\n5\nDPMD Jayawardene (Asia/SL)\n1998-2015\n448\n418\n39\n12650\n144\n33.37\n16020\n78.96\n19\n77\n28\n\n\n6\nInzamam-ul-Haq (Asia/PAK)\n1991-2007\n378\n350\n53\n11739\n137*\n39.52\n15812\n74.24\n10\n83\n20\n\n\n7\nV Kohli (INDIA)\n2008-2019\n242\n233\n39\n11609\n183\n59.84\n12445\n93.28\n43\n55\n13\n\n\n8\nJH Kallis (Afr/ICC/SA)\n1996-2014\n328\n314\n53\n11579\n139\n44.36\n15885\n72.89\n17\n86\n17\n\n\n\n\n\nIs there a significant difference in total runs scored by players from different regions?\nObjective:\nThis research question aims to investigate whether players from different regions (e.g., Asia, Europe, Africa, etc.) differ significantly in their total runs scored in ODI cricket. Understanding these differences can guide cricket boards to identify regional trends in player performance and focus on talent development in underperforming regions.\nCause:\nThe analysis can reveal whether certain regions consistently produce higher-scoring players or if underperformance is a trend in specific regions. This insight can help cricket boards allocate resources and create training programs tailored to regional needs, enhancing player development and competitiveness.\nStatistical Model:\nAnalysis of Variance (ANOVA)\nANOVA is suitable for comparing the means of a dependent variable (total runs scored) across multiple independent groups (regions). It determines if the observed differences in means are statistically significant. How it solves the question: By evaluating the variance within and between groups, ANOVA identifies whether the differences in total runs scored across regions are likely due to random chance or reflect genuine disparities.\n\n\nCode\n# Load necessary libraries\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(plotly)\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\nCode\n# Read and prepare data\ndata &lt;- read.csv(\"ODI data.csv\", stringsAsFactors = FALSE)\n\n# Convert numeric columns and clean data\ndata$Runs &lt;- as.numeric(gsub(\",\", \"\", data$Runs))\ndata$SR &lt;- as.numeric(gsub(\",\", \"\", data$SR))\ndata$Ave &lt;- as.numeric(gsub(\",\", \"\", data$Ave))\ndata$X100 &lt;- as.numeric(gsub(\",\", \"\", data$X100))\n\n# Add regions to players\ndata &lt;- data %&gt;%\n  mutate(\n    Region = case_when(\n      grepl(\"INDIA\", Player) ~ \"India\",\n      grepl(\"PAK\", Player) ~ \"Pakistan\",\n      grepl(\"AUS\", Player) ~ \"Australia\",\n      grepl(\"SA\", Player) ~ \"South Africa\",\n      grepl(\"SL\", Player) ~ \"Sri Lanka\",\n      grepl(\"WI\", Player) ~ \"West Indies\",\n      grepl(\"NZ\", Player) ~ \"New Zealand\",\n      grepl(\"ENG\", Player) ~ \"England\",\n      grepl(\"BDESH\", Player) ~ \"Bangladesh\",\n      grepl(\"ZIM\", Player) ~ \"Zimbabwe\",\n      grepl(\"AFG\", Player) ~ \"Afghanistan\",\n      TRUE ~ \"Other\"\n    )\n  )\n\n# Perform ANOVA to analyze differences in runs across regions\nanova_results &lt;- aov(Runs ~ Region, data = data)\nanova_summary &lt;- summary(anova_results)\n\n# Extract the p-value from ANOVA\nanova_p_value &lt;- anova_summary[[1]]$`Pr(&gt;F)`[1]\n\n# Check if ANOVA is significant and perform post-hoc analysis\nif (!is.na(anova_p_value) && anova_p_value &lt; 0.05) {\n  tukey_results &lt;- TukeyHSD(anova_results)\n  print(\"Tukey HSD Post-Hoc Results:\")\n  print(tukey_results)\n} else {\n  print(\"No significant differences found in ANOVA.\")\n}\n\n\n[1] \"Tukey HSD Post-Hoc Results:\"\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = Runs ~ Region, data = data)\n\n$Region\n                               diff          lwr         upr     p adj\nAustralia-Afghanistan     375.27961  -488.656023 1239.215239 0.9595944\nBangladesh-Afghanistan    -14.54814  -928.988069  899.891791 1.0000000\nEngland-Afghanistan        77.31048  -778.593144  933.214108 1.0000000\nIndia-Afghanistan         385.91443  -478.355439 1250.184304 0.9508336\nNew Zealand-Afghanistan   239.29570  -637.484763 1116.076163 0.9991955\nOther-Afghanistan        -329.04946 -1147.063067  488.964156 0.9772131\nPakistan-Afghanistan      314.75314  -549.516730 1179.023014 0.9896762\nSouth Africa-Afghanistan  302.71770  -587.730060 1193.165452 0.9942058\nSri Lanka-Afghanistan     365.09338  -512.144748 1242.331507 0.9704984\nWest Indies-Afghanistan   260.00694  -614.554080 1134.567955 0.9982272\nZimbabwe-Afghanistan      166.73596  -739.885061 1073.356986 0.9999836\nBangladesh-Australia     -389.82775  -973.359866  193.704372 0.5605520\nEngland-Australia        -297.96913  -784.672696  188.734444 0.6917593\nIndia-Australia            10.63482  -490.635321  511.904970 1.0000000\nNew Zealand-Australia    -135.98391  -658.528957  386.561141 0.9994869\nOther-Australia          -704.32906 -1120.809095 -287.849032 0.0000023\nPakistan-Australia        -60.52647  -561.796612  440.743680 0.9999998\nSouth Africa-Australia    -72.56191  -617.728450  472.604626 0.9999994\nSri Lanka-Australia       -10.18623  -533.498831  513.126374 1.0000000\nWest Indies-Australia    -115.27267  -634.085085  403.539744 0.9998896\nZimbabwe-Australia       -208.54365  -779.745035  362.657744 0.9894616\nEngland-Bangladesh         91.85862  -479.714625  663.431868 0.9999959\nIndia-Bangladesh          400.46257  -183.564286  984.489428 0.5182011\nNew Zealand-Bangladesh    253.84384  -348.542199  856.229878 0.9676342\nOther-Bangladesh         -314.50132  -827.600944  198.598310 0.6901258\nPakistan-Bangladesh       329.30128  -254.725576  913.328138 0.7931222\nSouth Africa-Bangladesh   317.26583  -304.845221  939.376890 0.8825444\nSri Lanka-Bangladesh      379.64152  -223.410462  982.693498 0.6520814\nWest Indies-Bangladesh    274.55508  -324.595933  873.706086 0.9411482\nZimbabwe-Bangladesh       181.28410  -463.763679  826.331881 0.9989426\nIndia-England             308.60395  -178.692676  795.900576 0.6432937\nNew Zealand-England       161.98522  -347.170525  671.140961 0.9967453\nOther-England            -406.35994  -805.912011   -6.807865 0.0420439\nPakistan-England          237.44266  -249.853966  724.739285 0.9115693\nSouth Africa-England      225.40721  -306.939287  757.753714 0.9664671\nSri Lanka-England         287.78290  -222.160553  797.726347 0.7921714\nWest Indies-England       182.69646  -322.627761  688.020672 0.9902774\nZimbabwe-England           89.42548  -469.553294  648.404254 0.9999961\nNew Zealand-India        -146.61873  -669.716204  376.478739 0.9989686\nOther-India              -714.96389 -1132.136817 -297.790959 0.0000015\nPakistan-India            -71.16129  -573.007278  430.684697 0.9999989\nSouth Africa-India        -83.19674  -628.892797  462.499324 0.9999977\nSri Lanka-India           -20.82105  -544.685268  503.043162 1.0000000\nWest Indies-India        -125.90749  -645.276301  393.461312 0.9997404\nZimbabwe-India           -219.17847  -790.885269  352.528329 0.9843557\nOther-New Zealand        -568.34516 -1010.854842 -125.835470 0.0016387\nPakistan-New Zealand       75.45744  -447.640030  598.554913 0.9999987\nSouth Africa-New Zealand   63.42200  -501.879482  628.723473 0.9999999\nSri Lanka-New Zealand     125.79768  -418.458956  670.054315 0.9998370\nWest Indies-New Zealand    20.71124  -519.219801  560.642277 1.0000000\nZimbabwe-New Zealand      -72.55974  -663.008917  517.889441 0.9999998\nPakistan-Other            643.80260   226.629669 1060.975527 0.0000308\nSouth Africa-Other        631.76715   162.759638 1100.774666 0.0006717\nSri Lanka-Other           694.14284   250.727033 1137.558638 0.0000211\nWest Indies-Other         589.05639   150.960725 1027.152063 0.0006961\nZimbabwe-Other            495.78542    -3.246165  994.817002 0.0533588\nSouth Africa-Pakistan     -12.03545  -557.731507  533.660615 1.0000000\nSri Lanka-Pakistan         50.34024  -473.523978  574.204453 1.0000000\nWest Indies-Pakistan      -54.74620  -574.115011  464.622603 1.0000000\nZimbabwe-Pakistan        -148.01718  -719.723978  423.689619 0.9995114\nSri Lanka-South Africa     62.37568  -503.635369  628.386736 0.9999999\nWest Indies-South Africa  -42.71076  -604.563722  519.142206 1.0000000\nZimbabwe-South Africa    -135.98173  -746.541689  474.578222 0.9998870\nWest Indies-Sri Lanka    -105.08644  -645.760353  435.587470 0.9999712\nZimbabwe-Sri Lanka       -198.35742  -789.485985  392.771152 0.9948192\nZimbabwe-West Indies      -93.27098  -680.419360  493.877410 0.9999964\n\n\nCode\n# Regional statistics calculation\nregional_stats &lt;- data %&gt;%\n  group_by(Region) %&gt;%\n  summarise(\n    Avg_Runs = mean(Runs, na.rm = TRUE),\n    Total_Players = n(),\n    Avg_Strike_Rate = mean(SR, na.rm = TRUE),\n    Total_Centuries = sum(X100, na.rm = TRUE),\n    Avg_Average = mean(Ave, na.rm = TRUE)\n  )\n\n# Create interactive bubble plot\nplot_ly(\n  regional_stats,\n  x = ~Avg_Runs,\n  y = ~Avg_Strike_Rate,\n  size = ~Total_Players,\n  color = ~Region,\n  text = ~paste(\n    \"Region:\", Region,\n    \"&lt;br&gt;Average Runs:\", round(Avg_Runs, 1),\n    \"&lt;br&gt;Players:\", Total_Players,\n    \"&lt;br&gt;Strike Rate:\", round(Avg_Strike_Rate, 1),\n    \"&lt;br&gt;Centuries:\", Total_Centuries,\n    \"&lt;br&gt;Batting Average:\", round(Avg_Average, 1)\n  ),\n  type = \"scatter\",\n  mode = \"markers\",\n  marker = list(\n    sizemode = \"area\",\n    opacity = 0.7,\n    line = list(color = \"white\", width = 1)\n  ),\n  hoverinfo = \"text\"\n) %&gt;%\n  layout(\n    title = \"Cricket Performance Analysis by Region\",\n    xaxis = list(title = \"Average Runs per Player\"),\n    yaxis = list(title = \"Average Strike Rate\"),\n    showlegend = TRUE,\n    plot_bgcolor = \"rgb(240, 240, 240)\",\n    paper_bgcolor = \"white\",\n    margin = list(t = 100)\n  )\n\n\n\n\n\n\n\n\nINTERPRETATION\nANOVA Results\nThe Analysis of Variance (ANOVA) test was conducted to determine whether there are statistically significant differences in the total runs scored by players across different regions. The key findings are:\nP-Value Interpretation:\nThe p-value from the ANOVA summary indicates whether there is a significant difference in the means of total runs scored across regions. If the p-value is less than 0.05, it suggests that at least one region’s players have significantly different total runs compared to others. In this case, since the p-value is below 0.05, there are significant differences between the regions.\nPost-Hoc Analysis:\nA Tukey HSD Post-Hoc Test was performed to identify which specific pairs of regions differ significantly. From the Tukey results:\nSignificant differences were observed between certain regions (e.g., Other-Australia shows a notable difference with a significant p-value). For most other comparisons, no statistically significant differences were found (p-values &gt; 0.05).\nBubble Plot Interpretation\nThe Bubble Plot visualizes the cricket performance metrics for each region based on key statistics like average runs, average strike rate, and the number of players. Key observations from the plot include:\nAverage Runs:\nRegions like Australia, India, and South Africa have higher average runs per player, indicating a strong overall batting performance. Lower average runs were observed for Afghanistan and Other regions.\nAverage Strike Rate:\nAfghanistan and West Indies players have higher strike rates, indicating an aggressive playing style. Bangladesh and Zimbabwe players tend to have lower strike rates, suggesting a more conservative approach.\nBubble Size (Total Players):\nLarger bubbles represent regions with more players contributing to the dataset (e.g., India, Australia). Smaller bubbles, such as Afghanistan, represent fewer players, which may influence the variability in performance statistics.\nKey Insights\nStatistical Significance:\nThe ANOVA test confirms that there are significant differences in total runs scored among players from different regions. The Tukey Post-Hoc test highlights the specific regional pairs where differences are significant.\nPerformance Trends:\nEstablished cricketing nations like Australia, India, and South Africa exhibit consistently high performance in both average runs and strike rates. Emerging cricketing nations like Afghanistan and Bangladesh have lower average runs but demonstrate potential with a few standout players. Strategic Implications:\nCricket boards can use these insights to identify underperforming regions and allocate resources for talent development. Established regions can focus on maintaining their high performance by nurturing upcoming players.\n\n\nAre high strike rates associated with fewer centuries and half-centuries?\nResearch Question: Are aggressive players (with high strike rates) less likely to achieve big innings like centuries or half-centuries?\nDetailed Explanation: This question investigates the trade-off between aggression and consistency in cricket. Players with high strike rates may focus on quick scoring rather than building large innings, potentially resulting in fewer centuries or half-centuries. The relationship between strike rate (categorized as high, medium, low) and milestones (centuries, half-centuries) is analyzed using a Chi-Square test for independence.\nOutcome:\nInsight into whether high strike rates compromise the ability to score big innings. Helps teams balance aggressive and consistent players in their batting lineup.\nVisualization:\nA pie chart showing the proportion of centuries and half-centuries for each strike rate category.\n\n\nCode\n# Load data\ndata &lt;- read.csv(\"ODI data.csv\")\n\n# Categorize players by strike rate (High: &gt;90, Low: &lt;=90)\ndata$SR_Category &lt;- ifelse(data$SR &gt; 90, \"High\", \"Low\")\n\n# Create a contingency table\ncontingency_table &lt;- table(data$SR_Category, data$X100 &gt; 0)\n\n# Perform Chi-Square Test for Independence\nchi_square_test &lt;- chisq.test(contingency_table)\n\n# Print Chi-Square Test Results\nprint(chi_square_test)\n\n\n\n    Pearson's Chi-squared test with Yates' continuity correction\n\ndata:  contingency_table\nX-squared = 22.601, df = 1, p-value = 1.994e-06\n\n\nCode\n# Create pie chart for Strike Rate vs Centuries\nplot_ly(\n  labels = c(\"High Strike Rate & No Century\", \"High Strike Rate & Century\", \n             \"Low Strike Rate & No Century\", \"Low Strike Rate & Century\"),\n  values = c(contingency_table[1, 1], contingency_table[1, 2], \n             contingency_table[2, 1], contingency_table[2, 2]),\n  type = \"pie\",\n  textinfo = \"label+percent\",\n  hoverinfo = \"label+value\"\n) %&gt;%\n  layout(\n    title = \"Strike Rate vs. Centuries (Pie Chart)\",\n    plot_bgcolor = \"rgb(240, 240, 240)\",\n    paper_bgcolor = \"white\"\n  )\n\n\n\n\n\n\n\n\nINTERPRETATION\nChi-Square Test Results\nThe Chi-Square Test for Independence examines the association between strike rate categories (High vs. Low) and the achievement of centuries. The results are as follows:\nChi-Square Value: 22.601 Degrees of Freedom (df): 1 P-Value: 1.994e-06\nSince the p-value is less than 0.05, we reject the null hypothesis that strike rate and the likelihood of scoring centuries are independent. This indicates a significant association between strike rate categories and the achievement of centuries. Players with higher strike rates are statistically more likely to score centuries.\nPie Chart Interpretation\nThe pie chart visualizes the relationship between strike rate categories (High and Low) and the occurrence of centuries. Key observations:\nLow Strike Rate & No Century (81.1%):\nThe majority of players with a low strike rate do not score centuries. This indicates that lower strike rates are generally associated with a lesser ability to achieve big scores.\nLow Strike Rate & Century (14.3%):\nA smaller proportion of players with low strike rates manage to score centuries. This suggests that although rare, players with lower strike rates can still achieve big innings.\nHigh Strike Rate & No Century (3.16%):\nA very small fraction of players with high strike rates fail to score centuries. This supports the notion that high-strike-rate players are often aggressive and capable of scoring big.\nHigh Strike Rate & Century (1.48%):\nA minimal percentage of players with high strike rates have scored centuries. However, this small proportion highlights the possibility that aggressive batting styles can still produce substantial scores.\nKey Insights\nStatistical Significance:\nThe Chi-Square Test confirms a strong association between higher strike rates and the likelihood of scoring centuries.\nPractical Implications:\nPlayers with high strike rates are valuable in formats requiring quick scoring and are more likely to impact matches significantly. However, low-strike-rate players, typically anchors, are also capable of scoring centuries in prolonged innings.\nStrategic Insights:\nTeams can use this analysis to balance their lineup by including both high-strike-rate players (aggressors) and low-strike-rate players (anchors), optimizing strategies based on match conditions.\n\n\nDo higher strike rates correlate with specific roles in the team (e.g., openers vs. middle-order)?\nCause:\nThis analysis aims to help teams optimize their batting order by identifying which roles are most associated with high-strike-rate players. Understanding this correlation allows for better utilization of player strengths in different match situations.\nStatistical Model:\nChi-Square Test for Independence\nThis model evaluates whether there is a significant association between batting positions (e.g., opener, middle-order) and strike rate categories (e.g., very high, high, medium, low). How it solves the question: By comparing the distribution of players across strike rate categories for different batting positions, the Chi-Square test determines if these two variables are statistically related.\nVisualization: An interactive heatmap displays the distribution of strike rate categories across batting positions, making it easy to identify patterns or outliers in the data.\nStatistical Outputs:\nChi-Square test results, including test statistics and p-values, to determine whether the observed association is significant.\nVisualization:\nA heatmap showing the relationship between strike rate categories and batting positions.\nInsights:\nInsights on which batting roles are more likely to feature players with high strike rates, aiding in team composition decisions.\n\n\nCode\n# Read and prepare data\ndata &lt;- read.csv(\"ODI data.csv\", stringsAsFactors = FALSE)\n\n# Convert strike rate to numeric\ndata$SR &lt;- as.numeric(as.character(data$SR))\n\n# Categorize strike rates\ndata$SR_Category &lt;- case_when(\n  data$SR &gt;= 100 ~ \"Very High (100+)\",\n  data$SR &gt;= 85 ~ \"High (85-99)\",\n  data$SR &gt;= 70 ~ \"Medium (70-84)\",\n  TRUE ~ \"Low (&lt;70)\"\n)\n\n# Create batting position categories\ndata$Position &lt;- case_when(\n  grepl(\"opener|opening\", tolower(data$Player)) ~ \"Opener\",\n  grepl(\"wicket|keeper\", tolower(data$Player)) ~ \"Wicketkeeper\",\n  data$SR &gt;= 90 ~ \"Aggressive Middle\",\n  data$SR &gt;= 75 ~ \"Anchor Middle\",\n  TRUE ~ \"Lower Order\"\n)\n\n# Create a contingency table\nposition_sr_matrix &lt;- table(data$Position, data$SR_Category)\n\n# Perform Chi-Square Test for Independence\nchi_square_test &lt;- chisq.test(position_sr_matrix)\n\n# Print test results\nprint(chi_square_test)\n\n\n\n    Pearson's Chi-squared test\n\ndata:  position_sr_matrix\nX-squared = 3254.4, df = 6, p-value &lt; 2.2e-16\n\n\nCode\n# Create interactive heatmap with custom colors\nplot_ly(\n  x = colnames(position_sr_matrix),\n  y = rownames(position_sr_matrix),\n  z = as.matrix(position_sr_matrix),\n  type = \"heatmap\",\n  colorscale = list(\n    c(0, \"#FFF3E0\"),      # Light Orange\n    c(0.25, \"#FFB74D\"),   # Medium Orange\n    c(0.5, \"#FF9800\"),    # Orange\n    c(0.75, \"#F57C00\"),   # Dark Orange\n    c(1, \"#E65100\")       # Deep Orange\n  ),\n  text = position_sr_matrix,\n  texttemplate = \"%{text}\",\n  textfont = list(\n    color = \"black\",\n    size = 14\n  ),\n  hoverongaps = FALSE\n) %&gt;%\n  layout(\n    title = list(\n      text = \"Strike Rate Distribution Across Batting Positions\",\n      font = list(size = 16)\n    ),\n    xaxis = list(\n      title = \"Strike Rate Category\",\n      titlefont = list(size = 14)\n    ),\n    yaxis = list(\n      title = \"Batting Position\",\n      titlefont = list(size = 14)\n    ),\n    plot_bgcolor = \"#FFFFFF\",\n    paper_bgcolor = \"#FFFFFF\",\n    margin = list(t = 100)\n  )\n\n\n\n\n\n\n\n\nINTERPRETATION\nChi-Square Test for Independence The Chi-Square Test for Independence was performed to evaluate whether there is a significant association between a player’s batting position (e.g., lower order, middle order) and their strike rate category (e.g., low, medium, high, very high). The key findings are:\nTest Results:\nChi-Square Statistic (X²): 3254.4 Degrees of Freedom (df): 6 p-value: &lt; 2.2e-16 (extremely small)\nInterpretation:\nSince the p-value is significantly less than 0.05, we reject the null hypothesis, indicating that there is no strong association between a player’s batting position and their strike rate category. This means that strike rates are not randomly distributed across batting positions, and certain strike rate patterns are strongly linked to specific roles in the team . Heatmap Visualization\nThe heatmap visually represents the distribution of strike rate categories across batting positions. Each cell’s color intensity corresponds to the frequency of players in that category. Key observations include:\nLower Order:\nThe majority of players in the lower order fall into the low strike rate (&lt;70) category (1540 players), indicating a less aggressive batting style, likely focused on defensive or supporting roles.\nAnchor Middle:\nPlayers in the anchor middle-order dominate the medium (70-84) and high (85-99) strike rate categories, showcasing their role in stabilizing the innings and building partnerships.\nAggressive Middle:\nThe aggressive middle-order players are predominantly found in the high (85-99) and very high (100+) strike rate categories, reflecting their role as explosive, run-scoring players.\nKey Insight s Strong Association:\nThe statistical test confirms that batting positions and strike rate categories are strongly associated, meaning that players’ strike rates are highly influenced by their roles in the team.\nRole-Specific Strike Rates:\nLower-order players exhibit lower strike rates, as expected, since they often play as bowlers or tailenders. Anchor middle-order players demonstrate balanced strike rates to ensure stability. Aggressive middle-order players have higher strike rates, fulfilling their role as aggressive batsmen tasked with scoring runs quickly.\nStrategic Implications:\nThis analysis can help cricket teams optimize their batting lineups by aligning players’ strike rate tendencies with the demands of specific positions. For example, teams can ensure that players with higher strike rates are placed in positions requiring quick scoring, while more stable batsmen occupy anchor roles.\n\n\nCONCLUSION\nThe Cricket Performance Analysis project provides a comprehensive overview of player performances and patterns across various aspects of One Day International (ODI) cricket. Through statistical analyses and visualizations, the project explored key factors that contribute to player success, team strategies, and regional trends.\nThe project not only highlights the value of data-driven decision-making in cricket but also emphasizes the importance of understanding player roles, regional dynamics, and individual performances. The findings can guide cricket boards, coaches, and analysts in formulating strategies, scouting talent, and improving team compositions.\nFuture work could expand on this foundation by integrating advanced machine learning models, incorporating bowling and fielding metrics, and analyzing more recent datasets to uncover evolving trends in ODI cricket.\n\n\nREFRENCES\n[1] J. K. Aggarwal, Data Analytics in Cricket: Applications and Challenges. London: CRC Press, 2019.\n[2] ESPNcricinfo, “Cricket Records and Statistics,” [Online]. Available: https://www.espncricinfo.com/. [Accessed: Dec. 4, 2024].\n[3] M. Bunker and S. Thabtah, “A machine learning framework for sport result prediction,” Applied Computing and Informatics, vol. 15, no. 1, pp. 27–33, 2019. [Online]. Available: https://doi.org/10.1016/j.aci.2017.09.005."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "#I am Harsha Reddy Vanga a graduate student pursuing my MS in Data Analytics Engineering at George Mason University, with a background in Computer Science and experience in project management, event coordination, and technical problem-solving. I have strong communication skills, a keen attention to detail, and a passion for learning and applying new technologies."
  },
  {
    "objectID": "page2.html",
    "href": "page2.html",
    "title": "CODE",
    "section": "",
    "text": "Load necessary libraries\nlibrary(GGally) library(ggplot2)\n\n\nRead the dataset\ndata &lt;- read.csv(“ODI data.csv”, stringsAsFactors = FALSE)\n\n\nConvert necessary columns to numeric\ndata\\(Runs &lt;- as.numeric(gsub(\",\", \"\", data\\)Runs)) data\\(BF &lt;- as.numeric(gsub(\",\", \"\", data\\)BF)) data\\(Ave &lt;- as.numeric(gsub(\",\", \"\", data\\)Ave)) data\\(SR &lt;- as.numeric(gsub(\",\", \"\", data\\)SR)) data\\(X100 &lt;- as.numeric(gsub(\",\", \"\", data\\)X100)) data\\(X50 &lt;- as.numeric(gsub(\",\", \"\", data\\)X50)) data\\(Inns &lt;- as.numeric(gsub(\",\", \"\", data\\)Inns)) data\\(NO &lt;- as.numeric(gsub(\",\", \"\", data\\)NO))\n\n\nSelect all relevant numeric columns for the pairs plot\nselected_data &lt;- data[, c(“Runs”, “BF”, “Ave”, “SR”, “X100”, “X50”, “Inns”, “NO”)]\n\n\nCreate the pairs plot\nggpairs( selected_data, title = “Pairs Plot for ODI Data”, upper = list(continuous = wrap(“cor”, size = 4)), lower = list(continuous = wrap(“points”, size = 1.5)), diag = list(continuous = wrap(“densityDiag”, alpha = 0.5)) )\n\n\nLoad necessary libraries\nlibrary(dplyr)\nlibrary(plotly)\n\n\nRead and prepare data\ndata &lt;- read.csv(“ODI data.csv”, stringsAsFactors = FALSE)\n\n\nConvert numeric columns and clean data\ndata\\(Runs &lt;- as.numeric(gsub(\",\", \"\", data\\)Runs)) data\\(SR &lt;- as.numeric(gsub(\",\", \"\", data\\)SR)) data\\(Ave &lt;- as.numeric(gsub(\",\", \"\", data\\)Ave)) data\\(X100 &lt;- as.numeric(gsub(\",\", \"\", data\\)X100))\n\n\nAdd regions to players\ndata &lt;- data %&gt;% mutate( Region = case_when( grepl(“INDIA”, Player) ~ “India”, grepl(“PAK”, Player) ~ “Pakistan”, grepl(“AUS”, Player) ~ “Australia”, grepl(“SA”, Player) ~ “South Africa”, grepl(“SL”, Player) ~ “Sri Lanka”, grepl(“WI”, Player) ~ “West Indies”, grepl(“NZ”, Player) ~ “New Zealand”, grepl(“ENG”, Player) ~ “England”, grepl(“BDESH”, Player) ~ “Bangladesh”, grepl(“ZIM”, Player) ~ “Zimbabwe”, grepl(“AFG”, Player) ~ “Afghanistan”, TRUE ~ “Other” ) )\n\n\nPerform ANOVA to analyze differences in runs across regions\nanova_results &lt;- aov(Runs ~ Region, data = data) anova_summary &lt;- summary(anova_results)\n\n\nExtract the p-value from ANOVA\nanova_p_value &lt;- anova_summary[[1]]$Pr(&gt;F)[1]\n\n\nCheck if ANOVA is significant and perform post-hoc analysis\nif (!is.na(anova_p_value) && anova_p_value &lt; 0.05) { tukey_results &lt;- TukeyHSD(anova_results) print(“Tukey HSD Post-Hoc Results:”) print(tukey_results) } else { print(“No significant differences found in ANOVA.”) }\n\n\nRegional statistics calculation\nregional_stats &lt;- data %&gt;% group_by(Region) %&gt;% summarise( Avg_Runs = mean(Runs, na.rm = TRUE), Total_Players = n(), Avg_Strike_Rate = mean(SR, na.rm = TRUE), Total_Centuries = sum(X100, na.rm = TRUE), Avg_Average = mean(Ave, na.rm = TRUE) )\n\n\nCreate interactive bubble plot\nplot_ly( regional_stats, x = ~Avg_Runs, y = ~Avg_Strike_Rate, size = ~Total_Players, color = ~Region, text = ~paste( “Region:”, Region, “Average Runs:”, round(Avg_Runs, 1), “Players:”, Total_Players, “Strike Rate:”, round(Avg_Strike_Rate, 1), “Centuries:”, Total_Centuries, “Batting Average:”, round(Avg_Average, 1) ), type = “scatter”, mode = “markers”, marker = list( sizemode = “area”, opacity = 0.7, line = list(color = “white”, width = 1) ), hoverinfo = “text” ) %&gt;% layout( title = “Cricket Performance Analysis by Region”, xaxis = list(title = “Average Runs per Player”), yaxis = list(title = “Average Strike Rate”), showlegend = TRUE, plot_bgcolor = “rgb(240, 240, 240)”, paper_bgcolor = “white”, margin = list(t = 100) )\n\n\nLoad data\ndata &lt;- read.csv(“ODI data.csv”)\n\n\nCategorize players by strike rate (High: &gt;90, Low: &lt;=90)\ndata\\(SR_Category &lt;- ifelse(data\\)SR &gt; 90, “High”, “Low”)\n\n\nCreate a contingency table\ncontingency_table &lt;- table(data\\(SR_Category, data\\)X100 &gt; 0)\n\n\nPerform Chi-Square Test for Independence\nchi_square_test &lt;- chisq.test(contingency_table)\n\n\nPrint Chi-Square Test Results\nprint(chi_square_test)\n\n\nCreate pie chart for Strike Rate vs Centuries\nplot_ly( labels = c(“High Strike Rate & No Century”, “High Strike Rate & Century”, “Low Strike Rate & No Century”, “Low Strike Rate & Century”), values = c(contingency_table[1, 1], contingency_table[1, 2], contingency_table[2, 1], contingency_table[2, 2]), type = “pie”, textinfo = “label+percent”, hoverinfo = “label+value” ) %&gt;% layout( title = “Strike Rate vs. Centuries (Pie Chart)”, plot_bgcolor = “rgb(240, 240, 240)”, paper_bgcolor = “white” )\n\n\nRead and prepare data\ndata &lt;- read.csv(“ODI data.csv”, stringsAsFactors = FALSE)\n\n\nConvert strike rate to numeric\ndata\\(SR &lt;- as.numeric(as.character(data\\)SR))\n\n\nCategorize strike rates\ndata\\(SR_Category &lt;- case_when(\n  data\\)SR &gt;= 100 ~ “Very High (100+)”, data\\(SR &gt;= 85 ~ \"High (85-99)\",\n  data\\)SR &gt;= 70 ~ “Medium (70-84)”, TRUE ~ “Low (&lt;70)” )\n\n\nCreate batting position categories\ndata\\(Position &lt;- case_when(\n  grepl(\"opener|opening\", tolower(data\\)Player)) ~ “Opener”, grepl(“wicket|keeper”, tolower(data\\(Player)) ~ \"Wicketkeeper\",\n  data\\)SR &gt;= 90 ~ “Aggressive Middle”, data$SR &gt;= 75 ~ “Anchor Middle”, TRUE ~ “Lower Order” )\n\n\nCreate a contingency table\nposition_sr_matrix &lt;- table(data\\(Position, data\\)SR_Category)\n\n\nPerform Chi-Square Test for Independence\nchi_square_test &lt;- chisq.test(position_sr_matrix)\n\n\nPrint test results\nprint(chi_square_test)\n\n\nCreate interactive heatmap with custom colors\nplot_ly( x = colnames(position_sr_matrix), y = rownames(position_sr_matrix), z = as.matrix(position_sr_matrix), type = “heatmap”, colorscale = list( c(0, “#FFF3E0”), # Light Orange c(0.25, “#FFB74D”), # Medium Orange c(0.5, “#FF9800”), # Orange c(0.75, “#F57C00”), # Dark Orange c(1, “#E65100”) # Deep Orange ), text = position_sr_matrix, texttemplate = “%{text}”, textfont = list( color = “black”, size = 14 ), hoverongaps = FALSE ) %&gt;% layout( title = list( text = “Strike Rate Distribution Across Batting Positions”, font = list(size = 16) ), xaxis = list( title = “Strike Rate Category”, titlefont = list(size = 14) ), yaxis = list( title = “Batting Position”, titlefont = list(size = 14) ), plot_bgcolor = “#FFFFFF”, paper_bgcolor = “#FFFFFF”, margin = list(t = 100) )"
  }
]